// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String    @id @default(uuid())
  firstName       String
  lastName        String
  email     String    @unique
  password  String
  admin     Boolean
  refreshToken String? 
  otp               String?    
  otpExpires        DateTime?  
  role      Role      @default(user)
  lastPasswordResetAt     DateTime? 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  product[]
  orders    Order[]
  reviews    Review[]
   carts     Cart[]
}

enum Role {
  user
  admin 
}

model product {
  id              String         @id @default(uuid())
  name            String
  description     String
  price           Float
  imageUrl        String?
  userId          String
  categoryId      String
 stockInitial  Int      
  stockFinal    Int      
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Is_available    Boolean        @default(true)
  OrderProducts OrderProduct[]
  reviews       Review[]
  category        category       @relation(fields: [categoryId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])

  Cart Cart[]
}

model category {
  id      String    @id @default(cuid())
  name    String
  product product[]
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
}

model Order {
  id           String      @id @default(uuid())
  productId    String
  quantity     Int
  userId       String
  createdAt    DateTime    @default(now())
  price        Float
  total        Int
  status       OrderStatus @default(PENDING)
  statusReason String?
  Is_available Boolean     @default(true)
  payments  Payment[]
  user    User    @relation(fields: [userId], references: [id])

  products OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Payment {
  id            String        @id @default(uuid())
  amount        Float         
  status        PaymentStatus @default(PENDING)
  paymentMethod String?       
  reference     String?       @unique 
  description   String?
  // metadata      Json?         
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Relations pour les remboursements
  refunds       Payment[] @relation("PaymentRefunds")
  originalPayment Payment? @relation("PaymentRefunds", fields: [originalPaymentId], references: [id])
  originalPaymentId String?


  @@map("payments")
}



// Enums
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIAL_REFUND
}



model Cart {
  id        String       @id @default(uuid())
  userId    String
  productId String ?
  status    CartStatus @default(ACTIVE)
  total     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products product[]
  // Relations
  user      User       @relation(fields: [userId], references: [id])
}


  


enum CartStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}
