// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  admin     Boolean
  role      Role      @default(admin)
  createdAt DateTime  @default(now())
  products  product[]
  Cart      Cart[]
  orders    Order[]
  Review    Review[]
}

model post {
  id        String   @unique
  title     String
  content   String
  published Boolean
  createdAT DateTime
  authorId  String
}

model category {
  id      String    @id @default(cuid())
  name    String
  product product[]
}

model product {
  id              String   @id @default(uuid())
  name            String
  description     String
  price           Float
  imageUrl        String?
  stock           Int
  categoryId      String
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Is_available    Boolean  @default(true)
  products_Number Int      @default(0)

  category      category       @relation(fields: [categoryId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
  reviews       Review[]
  cartProducts  Cartproduct[]
  OrderProducts OrderProduct[]
  Order         Order[]
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
}

model Order {
  id           String      @id @default(uuid())
  productId    String
  quantity     Int
  userId       String
  createdAt    DateTime    @default(now())
  price        Float
  status       OrderStatus @default(PENDING)
  statusReason String?
  Is_available Boolean     @default(true)

  product product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  products OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Cart {
  id            String        @id @default(uuid())
  userId        String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  cartProducts   Cartproduct[]
}

model Cartproduct {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   product  @relation(fields: [productId], references: [id])
}

enum Role {
  user
  admin
}
