// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  password  String
  admin   Boolean
  role     String
  createdAt DateTime  @default(now())
  products  product[]
  Cart Cart[]
  Order Order[]
}

model post {
  id        String   @unique
  title     String
  content   String
  published Boolean
  createdAT DateTime
  authorId  String
}

model category {
  id   String @id @default(cuid())
  name String
  product product[]
}

model product {
  id          String @id @default(uuid())
  name        String
  description String
  price       Float
  imageUrl    String?
  stock       Int
  categoryId  String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    category @relation(fields: [categoryId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  Is_available Boolean @default(true)
  products_Number Int @default(0)


}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  // items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}


enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
}

model Order {
  id       String     @id @default(uuid())
  productId  String
  quantity Int
  // userId   String
  createdAt DateTime    @default(now())
  user        User[]
  price  Float
  status     String
  statusReason String?
  Is_available Boolean @default(true)



}




// model CartItem {
//   id        String   @id @default(uuid())
//   cart      Cart     @relation(fields: [cartId], references: [id])
//   cartId    String
//   product   Product  @relation(fields: [productId], references: [id])
//   productId String
//   quantity  Int
// }

